// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using xmedicalehr.api.Data;

namespace xmedical_ehr.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211025142152_fieldsChangedInOrdenMedica")]
    partial class fieldsChangedInOrdenMedica
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("xmedicalehr.api.Account.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DisplayName")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "c6fd389f-68f6-47cc-bc11-ac0c453abbe1",
                            ConcurrencyStamp = "ff460bd3-978a-4b32-9bd9-49b4dca81153",
                            DisplayName = "Administrador",
                            Name = "admin",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "410be4c9-b0d8-41a5-a318-d4fd8e726c05",
                            ConcurrencyStamp = "15cbdd67-5dea-43b1-9d47-786882d298f2",
                            DisplayName = "User",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("xmedicalehr.api.Account.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Prefix")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "980b0310-9391-42e2-a993-3050913cc211",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9b82e89-edd5-48a0-a728-7e92c90fb921",
                            Email = "root@system.local",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Root",
                            NormalizedEmail = "ROOT@SYSTEM.LOCAL",
                            NormalizedUserName = "ROOT@SYSTEM.LOCAL",
                            PasswordHash = "AQAAAAEAACcQAAAAEBEI92DDQ3rQr8oCpJKHlvz1hN/VDJpzGkFdV3qEHSjAQdLm5q6JEvzmS6sJpQnHMw==",
                            PhoneNumberConfirmed = false,
                            Prefix = "Sr",
                            SecurityStamp = "6XKETTFVMB3X6M4ENBW6YYVZYCTO52XW",
                            TwoFactorEnabled = false,
                            UserName = "root@system.local"
                        });
                });

            modelBuilder.Entity("xmedicalehr.api.Models.AlergiaPaciente", b =>
                {
                    b.Property<string>("PacienteId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SustanciaId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Comentario")
                        .HasColumnType("varchar(200)");

                    b.HasKey("PacienteId", "SustanciaId")
                        .HasName("PRIMARY");

                    b.HasIndex("SustanciaId");

                    b.ToTable("AlergiasPacientes");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.AntecedentePaciente", b =>
                {
                    b.Property<string>("PacienteId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TipoAntecedenteId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<sbyte>("Deleted")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Detalle")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(255)");

                    b.HasKey("PacienteId", "TipoAntecedenteId")
                        .HasName("PRIMARY");

                    b.HasIndex("TipoAntecedenteId");

                    b.HasIndex("PacienteId", "TipoAntecedenteId");

                    b.ToTable("AntecedentesPacientes");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Aseguradora", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CodigoInt")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Aseguradoras");

                    b.HasData(
                        new
                        {
                            Id = "83ff4b07-7679-4d9d-b458-ae3da97f50cf",
                            Nombre = "SENASA"
                        },
                        new
                        {
                            Id = "f39bffcb-a60f-4394-9f9e-13227ead33bd",
                            Nombre = "ARS HUMANO"
                        },
                        new
                        {
                            Id = "a33f0d75-6cc4-4d7c-8f52-f754ca62f365",
                            Nombre = "UNIVERSAL"
                        });
                });

            modelBuilder.Entity("xmedicalehr.api.Models.AtencionMedica", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AseguradoraId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CamaId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<sbyte>("Deleted")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EdadPaciente")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("FirmaPaciente")
                        .HasColumnType("varbinary(2048)");

                    b.Property<string>("MedicoId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreFinanciador")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Origen")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PacienteId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TipoFinanciamiento")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TipoId")
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("AseguradoraId");

                    b.HasIndex("CamaId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("TipoId");

                    b.ToTable("AtencionesMedicas");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Cama", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HabitacionId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("HabitacionId");

                    b.ToTable("Camas");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Departamento", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Diagnostico", b =>
                {
                    b.Property<string>("NotaMedicaId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NumItem")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Comentario")
                        .HasColumnType("varchar(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EnfermedadId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(255)");

                    b.HasKey("NotaMedicaId", "NumItem")
                        .HasName("PRIMARY");

                    b.HasIndex("EnfermedadId");

                    b.ToTable("Diagnosticos");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Empresa", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Direccion")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Eslogan")
                        .HasColumnType("varchar(200)");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(2038)");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Telefono")
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Enfermedad", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Catalogo")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Codigo")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Keywords")
                        .HasColumnType("varchar(2045)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Enfermedades");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Estudio", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Tipo")
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Estudios");

                    b.HasData(
                        new
                        {
                            Id = "dc7b0520-7392-43e9-9e60-381cce4f434e",
                            Descripcion = "HEMOGRAMA",
                            Tipo = "LAB"
                        },
                        new
                        {
                            Id = "df5ce0db-baa6-425d-9f34-93009e54d9d7",
                            Descripcion = "ORINA",
                            Tipo = "LAB"
                        },
                        new
                        {
                            Id = "cbf6728f-1e01-4b4e-ae22-38282fc3cc66",
                            Descripcion = "COPROLOGICO",
                            Tipo = "LAB"
                        },
                        new
                        {
                            Id = "fb05804c-c719-4798-83ae-2bfe3a76c91a",
                            Descripcion = "SONOGRAFIA",
                            Tipo = "IMG"
                        },
                        new
                        {
                            Id = "25ec36c9-34e5-4eef-a1ef-915d0d23c3d4",
                            Descripcion = "TOMOGRAFIA",
                            Tipo = "IMG"
                        },
                        new
                        {
                            Id = "7850f594-a33c-4135-b28c-14e3a1ddede1",
                            Descripcion = "RADIOGRAFIA",
                            Tipo = "IMG"
                        });
                });

            modelBuilder.Entity("xmedicalehr.api.Models.ExploracionItem", b =>
                {
                    b.Property<string>("NotaMedicaId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ExploracionItemTemplateId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(255)");

                    b.HasKey("NotaMedicaId", "ExploracionItemTemplateId")
                        .HasName("PRIMARY");

                    b.HasIndex("ExploracionItemTemplateId");

                    b.ToTable("ExploracionItems");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.ExploracionItemTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<sbyte>("Deleted")
                        .HasColumnType("tinyint");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("ExploracionItemTemplates");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.GrupoAntecedente", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("GruposAntecedentes");

                    b.HasData(
                        new
                        {
                            Id = "66d2033c-7c57-4da1-a60f-1b45cd7e91d3",
                            Descripcion = "PATOLOGICOS"
                        },
                        new
                        {
                            Id = "7d17a379-beab-4e03-be45-6d04eaf886c7",
                            Descripcion = "NO PATOLOGICOS"
                        },
                        new
                        {
                            Id = "3ab1da4d-f71e-47fe-b435-39f3e8fa4346",
                            Descripcion = "PSIQUIATRICOS"
                        });
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Habitacion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Habitaciones");

                    b.HasData(
                        new
                        {
                            Id = "9cde42e2-ee5c-4158-8a71-b921e20e7353",
                            Descripcion = "Habitacion 301"
                        },
                        new
                        {
                            Id = "a3c94bd3-bf7d-4c25-914f-6ea40419b39c",
                            Descripcion = "Habitacion 302"
                        },
                        new
                        {
                            Id = "4f79839c-1a40-4026-a6d4-b2845617c32a",
                            Descripcion = "Habitacion 303"
                        });
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Medicacion", b =>
                {
                    b.Property<string>("AtencionId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NotaEnfermeriaId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NumItem")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MedicamentoId")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Unidad")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Via")
                        .HasColumnType("varchar(45)");

                    b.HasKey("AtencionId", "NotaEnfermeriaId", "NumItem")
                        .HasName("PRIMARY");

                    b.HasIndex("MedicamentoId");

                    b.HasIndex("NotaEnfermeriaId");

                    b.ToTable("Medicaciones");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Medicamento", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(512)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Medicamentos");

                    b.HasData(
                        new
                        {
                            Id = "ec087614-a914-4279-a92d-993a292fcb44",
                            CreatedAt = new DateTime(2021, 10, 25, 10, 21, 51, 776, DateTimeKind.Local).AddTicks(5229),
                            Deleted = false,
                            Descripcion = "ACETAMINOFEN"
                        },
                        new
                        {
                            Id = "c141dc89-2cae-49e3-867d-dc8d6c9a732f",
                            CreatedAt = new DateTime(2021, 10, 25, 10, 21, 51, 777, DateTimeKind.Local).AddTicks(1113),
                            Deleted = false,
                            Descripcion = "PARACETAMOL"
                        },
                        new
                        {
                            Id = "c399acc8-da3e-49a5-ac9a-5620fd26652d",
                            CreatedAt = new DateTime(2021, 10, 25, 10, 21, 51, 777, DateTimeKind.Local).AddTicks(1131),
                            Deleted = false,
                            Descripcion = "SOLUCION SALINA MIXTA 1000ml"
                        });
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Nacionalidad", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CodigoInt")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Nacionalidades");

                    b.HasData(
                        new
                        {
                            Id = "0222ed7a-a9e7-46b7-8cf9-6b09aaa7aef9",
                            Descripcion = "Dominicana"
                        });
                });

            modelBuilder.Entity("xmedicalehr.api.Models.NotaEnfermeria", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AtencionId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EnfermeraId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<string>("HabitusExterior")
                        .HasColumnType("mediumtext");

                    b.Property<string>("Observaciones")
                        .HasColumnType("mediumtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("AtencionId");

                    b.HasIndex("EnfermeraId");

                    b.ToTable("NotasEnfermeria");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.NotaMedica", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AtencionId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("DeOrden")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Dieta")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("EscalaDolor")
                        .HasColumnType("int");

                    b.Property<int>("EscalaGlasgow")
                        .HasColumnType("int");

                    b.Property<string>("ExamenFisico")
                        .HasColumnType("mediumtext");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<string>("HistoriaEnfermedad")
                        .HasColumnType("mediumtext");

                    b.Property<string>("MedicoId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MotivoConsulta")
                        .HasColumnType("mediumtext");

                    b.Property<string>("MotivoEgreso")
                        .HasColumnType("mediumtext");

                    b.Property<string>("Nota")
                        .HasColumnType("mediumtext");

                    b.Property<string>("Observaciones")
                        .HasColumnType("mediumtext");

                    b.Property<string>("OtrosParametros")
                        .HasColumnType("varchar(1024)");

                    b.Property<decimal>("Peso")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Pronostico")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SaturacionOxigeno")
                        .HasColumnType("int");

                    b.Property<string>("TipoNotaId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UnidadPeso")
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("AtencionId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("TipoNotaId");

                    b.ToTable("NotasMedica");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.NotaMedicaCustomField", b =>
                {
                    b.Property<string>("NotaMedicaId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NumItem")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Valor")
                        .HasColumnType("mediumtext");

                    b.HasKey("NotaMedicaId", "NumItem")
                        .HasName("PRIMARY");

                    b.ToTable("NotaMedicaCustomFields");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.OrdenMedica", b =>
                {
                    b.Property<string>("AntencionId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NotaMedicaId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NumItem")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("CantidadDosis")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Comentario")
                        .HasColumnType("mediumtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<sbyte>("Deleted")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EstudioId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<string>("Instruccciones")
                        .HasColumnType("mediumtext");

                    b.Property<int>("Intervalo")
                        .HasColumnType("int(11)");

                    b.Property<string>("MedicamentoId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Monodosis")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NumDiagnostico")
                        .HasColumnType("int(11)");

                    b.Property<bool>("Suspendido")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Tiempo")
                        .HasColumnType("varchar(45)");

                    b.Property<int>("TiempoExpiracion")
                        .HasColumnType("int(11)");

                    b.Property<string>("Tipo")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("UnidadDosis")
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Via")
                        .HasColumnType("varchar(100)");

                    b.HasKey("AntencionId", "NotaMedicaId", "NumItem");

                    b.HasIndex("EstudioId");

                    b.HasIndex("MedicamentoId");

                    b.HasIndex("NotaMedicaId");

                    b.ToTable("OrdenesMedica");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Paciente", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AseguradoraId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Celular")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Ciudad")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Direccion")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("char(1)");

                    b.Property<decimal>("Estatura")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime");

                    b.Property<string>("NSS")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NacionalidadId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombres")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nota")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("NumAsegurado")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PrimerApellido")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProvinciaId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SegundoApellido")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Sexo")
                        .HasColumnType("char(1)");

                    b.Property<string>("Telefono")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UnidadEstatura")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("AseguradoraId");

                    b.HasIndex("Cedula")
                        .IsUnique()
                        .HasDatabaseName("Cedula_UNIQUE");

                    b.HasIndex("NacionalidadId");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.PacienteParentesco", b =>
                {
                    b.Property<string>("PacienteId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TipoParentescoId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ParentescoId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Comentario")
                        .HasColumnType("varchar(200)");

                    b.HasKey("PacienteId", "TipoParentescoId", "ParentescoId")
                        .HasName("PRIMARY");

                    b.HasIndex("ParentescoId");

                    b.HasIndex("TipoParentescoId");

                    b.ToTable("PacientesParentescos");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Provincia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CodigoInt")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Provincias");

                    b.HasData(
                        new
                        {
                            Id = "a920506d-05e3-4b16-90cf-af689bf7f028",
                            Nombre = "Duarte"
                        });
                });

            modelBuilder.Entity("xmedicalehr.api.Models.SignosVitales", b =>
                {
                    b.Property<string>("AtencionId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NumItem")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Diuresis")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("FrecuenciaCardiaca")
                        .HasColumnType("int");

                    b.Property<int>("FrecuenciaRespiratoria")
                        .HasColumnType("int");

                    b.Property<string>("NotaEnfermeriaId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NotaMedicaId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Origen")
                        .HasColumnType("varchar(10)");

                    b.Property<int>("PresionDiastolica")
                        .HasColumnType("int");

                    b.Property<int>("PresionSistolica")
                        .HasColumnType("int");

                    b.Property<decimal>("Temperatura")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("UnidadTemperatura")
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(255)");

                    b.HasKey("AtencionId", "NumItem")
                        .HasName("PRIMARY");

                    b.HasIndex("NotaEnfermeriaId");

                    b.HasIndex("NotaMedicaId");

                    b.HasIndex("AtencionId", "NotaMedicaId", "NumItem")
                        .IsUnique();

                    b.ToTable("SignosVitales");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.SolicitudInterconsulta", b =>
                {
                    b.Property<string>("AtencionId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NumItem")
                        .HasColumnType("int");

                    b.Property<bool>("Atendido")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DepartamentoId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MedicoId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MedicoInterconsultadoId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Motivo")
                        .HasColumnType("mediumtext");

                    b.Property<string>("Recomendaciones")
                        .HasColumnType("mediumtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(255)");

                    b.HasKey("AtencionId", "NumItem")
                        .HasName("PRIMARY");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("MedicoInterconsultadoId");

                    b.ToTable("SolicitudesInterconsultas");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Sustancia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Sustancias");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.TipoAntecedente", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GrupoId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("GrupoId");

                    b.ToTable("TiposAntecedentes");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.TipoAtencion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("TiposAtenciones");

                    b.HasData(
                        new
                        {
                            Id = "E",
                            Descripcion = "Emergencia"
                        },
                        new
                        {
                            Id = "H",
                            Descripcion = "Hospitalizacion"
                        },
                        new
                        {
                            Id = "A",
                            Descripcion = "Ambulatoria"
                        });
                });

            modelBuilder.Entity("xmedicalehr.api.Models.TipoNotaMedica", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("TiposNotasMedicas");

                    b.HasData(
                        new
                        {
                            Id = "I",
                            Descripcion = "Ingreso"
                        },
                        new
                        {
                            Id = "E",
                            Descripcion = "Evolucion"
                        },
                        new
                        {
                            Id = "EG",
                            Descripcion = "Egreso"
                        });
                });

            modelBuilder.Entity("xmedicalehr.api.Models.TipoParentesco", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("TiposParentescos");

                    b.HasData(
                        new
                        {
                            Id = "5e6f7b81-b5b6-48ef-a392-89dface5946b",
                            Descripcion = "Esposo/a"
                        },
                        new
                        {
                            Id = "0152a497-0bcf-40cc-aeb2-b87a649f1135",
                            Descripcion = "Padre"
                        },
                        new
                        {
                            Id = "10d9bbfa-f7b9-481d-80fe-59ecda65aec3",
                            Descripcion = "Madre"
                        },
                        new
                        {
                            Id = "d72f8ef6-129c-4d06-a3a0-0479cc7969d3",
                            Descripcion = "Hijo/a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("xmedicalehr.api.Account.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("xmedicalehr.api.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("xmedicalehr.api.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("xmedicalehr.api.Account.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xmedicalehr.api.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("xmedicalehr.api.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xmedicalehr.api.Models.AlergiaPaciente", b =>
                {
                    b.HasOne("xmedicalehr.api.Models.Paciente", "Paciente")
                        .WithMany("Alergias")
                        .HasForeignKey("PacienteId")
                        .HasConstraintName("FK_AlergiaPaciente_Pacientea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xmedicalehr.api.Models.Sustancia", "Sustancia")
                        .WithMany("Alergias")
                        .HasForeignKey("SustanciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Sustancia");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.AntecedentePaciente", b =>
                {
                    b.HasOne("xmedicalehr.api.Models.Paciente", "Paciente")
                        .WithMany("Antecedentes")
                        .HasForeignKey("PacienteId")
                        .HasConstraintName("FK_AntecedentePaciente_Paciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xmedicalehr.api.Models.TipoAntecedente", "TipoAntecedente")
                        .WithMany("AntecedentesPacientes")
                        .HasForeignKey("TipoAntecedenteId")
                        .HasConstraintName("FK_AntecedentePaciente_TipoAntecedente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("TipoAntecedente");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.AtencionMedica", b =>
                {
                    b.HasOne("xmedicalehr.api.Models.Aseguradora", "Aseguradora")
                        .WithMany("Atenciones")
                        .HasForeignKey("AseguradoraId")
                        .HasConstraintName("FK_AtencionesMedicas_Aseguradoras");

                    b.HasOne("xmedicalehr.api.Models.Cama", "Cama")
                        .WithMany("Atenciones")
                        .HasForeignKey("CamaId")
                        .HasConstraintName("FK_AtencionesMedicas_Camas");

                    b.HasOne("xmedicalehr.api.Account.User", "Creator")
                        .WithMany("AtencionesCreadas")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_AtencionesMedicas_Creator");

                    b.HasOne("xmedicalehr.api.Account.User", "Medico")
                        .WithMany("Atenciones")
                        .HasForeignKey("MedicoId")
                        .HasConstraintName("FK_AtencionesMedicas_Medicos");

                    b.HasOne("xmedicalehr.api.Models.Paciente", "Paciente")
                        .WithMany("Atenciones")
                        .HasForeignKey("PacienteId")
                        .HasConstraintName("FK_AtencionesMedicas_Pacientes");

                    b.HasOne("xmedicalehr.api.Models.TipoAtencion", "TipoAtencion")
                        .WithMany("Atenciones")
                        .HasForeignKey("TipoId")
                        .HasConstraintName("FK_AtencionesMedicas_TipoAtenciones");

                    b.Navigation("Aseguradora");

                    b.Navigation("Cama");

                    b.Navigation("Creator");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");

                    b.Navigation("TipoAtencion");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Cama", b =>
                {
                    b.HasOne("xmedicalehr.api.Models.Habitacion", "Habitacion")
                        .WithMany("Camas")
                        .HasForeignKey("HabitacionId")
                        .HasConstraintName("FK_Cama_Habitacion");

                    b.Navigation("Habitacion");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Diagnostico", b =>
                {
                    b.HasOne("xmedicalehr.api.Models.Enfermedad", "Enfermedad")
                        .WithMany("Diagnosticos")
                        .HasForeignKey("EnfermedadId")
                        .HasConstraintName("FK_Diagnosticos_Enfermerdad");

                    b.HasOne("xmedicalehr.api.Models.NotaMedica", "NotaMedica")
                        .WithMany("Diagnosticos")
                        .HasForeignKey("NotaMedicaId")
                        .HasConstraintName("FK_Diagnosticos_NotasMedicas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enfermedad");

                    b.Navigation("NotaMedica");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.ExploracionItem", b =>
                {
                    b.HasOne("xmedicalehr.api.Models.ExploracionItemTemplate", "ExploracionItemTemplate")
                        .WithMany("ExploracionItems")
                        .HasForeignKey("ExploracionItemTemplateId")
                        .HasConstraintName("FK_ExploracionItem_ExploracionItemTemplate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xmedicalehr.api.Models.NotaMedica", "NotaMedica")
                        .WithMany("ExploracionItems")
                        .HasForeignKey("NotaMedicaId")
                        .HasConstraintName("FK_ExploracionItem_NotasMedicas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExploracionItemTemplate");

                    b.Navigation("NotaMedica");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Medicacion", b =>
                {
                    b.HasOne("xmedicalehr.api.Models.AtencionMedica", "AtencionMedica")
                        .WithMany("Medicaciones")
                        .HasForeignKey("AtencionId")
                        .HasConstraintName("FK_Medicacion_AtencionesMedicas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xmedicalehr.api.Models.Medicamento", "Medicamento")
                        .WithMany("Medicaciones")
                        .HasForeignKey("MedicamentoId")
                        .HasConstraintName("FK_Medicacion_Medicamentos");

                    b.HasOne("xmedicalehr.api.Models.NotaEnfermeria", "NotaEnfermeria")
                        .WithMany("Medicaciones")
                        .HasForeignKey("NotaEnfermeriaId")
                        .HasConstraintName("FK_Medicacion_NotasEnfemeria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AtencionMedica");

                    b.Navigation("Medicamento");

                    b.Navigation("NotaEnfermeria");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.NotaEnfermeria", b =>
                {
                    b.HasOne("xmedicalehr.api.Models.AtencionMedica", "AtencionMedica")
                        .WithMany("NotasEnfermeria")
                        .HasForeignKey("AtencionId")
                        .HasConstraintName("FK_NotaEnfermeria_AtencionMedia");

                    b.HasOne("xmedicalehr.api.Account.User", "Enfermera")
                        .WithMany("NotasEnfermeria")
                        .HasForeignKey("EnfermeraId")
                        .HasConstraintName("FK_NotaEnfermeria_Enfermera");

                    b.Navigation("AtencionMedica");

                    b.Navigation("Enfermera");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.NotaMedica", b =>
                {
                    b.HasOne("xmedicalehr.api.Models.AtencionMedica", "AtencionMedica")
                        .WithMany("NotasMedicas")
                        .HasForeignKey("AtencionId")
                        .HasConstraintName("FK_NotasMedicas_AtencionesMedica");

                    b.HasOne("xmedicalehr.api.Account.User", "Medico")
                        .WithMany("NotasMedicas")
                        .HasForeignKey("MedicoId")
                        .HasConstraintName("FK_NotasMedicas_Medicos");

                    b.HasOne("xmedicalehr.api.Models.TipoNotaMedica", "TipoNota")
                        .WithMany("NotasMedicas")
                        .HasForeignKey("TipoNotaId")
                        .HasConstraintName("FK_NotasMedicas_TiposNota");

                    b.Navigation("AtencionMedica");

                    b.Navigation("Medico");

                    b.Navigation("TipoNota");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.NotaMedicaCustomField", b =>
                {
                    b.HasOne("xmedicalehr.api.Models.NotaMedica", "NotaMedica")
                        .WithMany("CustomFields")
                        .HasForeignKey("NotaMedicaId")
                        .HasConstraintName("FK_NotasMedicasCustomField_NotasMedica")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotaMedica");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.OrdenMedica", b =>
                {
                    b.HasOne("xmedicalehr.api.Models.AtencionMedica", "AntencionMedica")
                        .WithMany("OrdenesMedicas")
                        .HasForeignKey("AntencionId")
                        .HasConstraintName("FK_OrdenesMedicas_AtencionesMedicas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xmedicalehr.api.Models.Estudio", "Estudio")
                        .WithMany("OrdenesMedicas")
                        .HasForeignKey("EstudioId")
                        .HasConstraintName("FK_OrdenesMedica_Estudios");

                    b.HasOne("xmedicalehr.api.Models.Medicamento", "Medicamento")
                        .WithMany("OrdenesMedicas")
                        .HasForeignKey("MedicamentoId")
                        .HasConstraintName("FK_OrdenesMedica_Medicamentos");

                    b.HasOne("xmedicalehr.api.Models.NotaMedica", "NotaMedica")
                        .WithMany("OrdenesMedicas")
                        .HasForeignKey("NotaMedicaId")
                        .HasConstraintName("FK_OrdenesMedica_NotasMedica")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AntencionMedica");

                    b.Navigation("Estudio");

                    b.Navigation("Medicamento");

                    b.Navigation("NotaMedica");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Paciente", b =>
                {
                    b.HasOne("xmedicalehr.api.Models.Aseguradora", "Aseguradora")
                        .WithMany("Pacientes")
                        .HasForeignKey("AseguradoraId")
                        .HasConstraintName("FK_Pacientes_Aseguradoras");

                    b.HasOne("xmedicalehr.api.Models.Nacionalidad", "Nacionalidad")
                        .WithMany("Pacientes")
                        .HasForeignKey("NacionalidadId")
                        .HasConstraintName("FK_Pacientes_Nacionalidades");

                    b.HasOne("xmedicalehr.api.Models.Provincia", "Provincia")
                        .WithMany("Pacientes")
                        .HasForeignKey("ProvinciaId")
                        .HasConstraintName("FK_Pacientes_Provincias");

                    b.Navigation("Aseguradora");

                    b.Navigation("Nacionalidad");

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.PacienteParentesco", b =>
                {
                    b.HasOne("xmedicalehr.api.Models.Paciente", "Paciente")
                        .WithMany("PacienteParentescos")
                        .HasForeignKey("PacienteId")
                        .HasConstraintName("FK_PacienteParentescos_Pacientes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xmedicalehr.api.Models.Paciente", "Parentesco")
                        .WithMany("ParentescosPaciente")
                        .HasForeignKey("ParentescoId")
                        .HasConstraintName("FK_ParentescosPaciente_Pacientes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xmedicalehr.api.Models.TipoParentesco", "TipoParentesco")
                        .WithMany("PacientesParentesco")
                        .HasForeignKey("TipoParentescoId")
                        .HasConstraintName("FK_PacientesParentesco_TiposParentesco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Parentesco");

                    b.Navigation("TipoParentesco");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.SignosVitales", b =>
                {
                    b.HasOne("xmedicalehr.api.Models.AtencionMedica", "Atencion")
                        .WithMany("SignosVitales")
                        .HasForeignKey("AtencionId")
                        .HasConstraintName("FK_SignosVitales_Atenciones")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xmedicalehr.api.Models.NotaEnfermeria", "NotaEnfermeria")
                        .WithMany("SignosVitales")
                        .HasForeignKey("NotaEnfermeriaId")
                        .HasConstraintName("FK_SignosVitales_NotasEnfermeria");

                    b.HasOne("xmedicalehr.api.Models.NotaMedica", "NotaMedica")
                        .WithMany("SignosVitales")
                        .HasForeignKey("NotaMedicaId")
                        .HasConstraintName("FK_SignosVitales_NotasMedica");

                    b.Navigation("Atencion");

                    b.Navigation("NotaEnfermeria");

                    b.Navigation("NotaMedica");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.SolicitudInterconsulta", b =>
                {
                    b.HasOne("xmedicalehr.api.Models.AtencionMedica", "Atencion")
                        .WithMany("SolicitudesInterconsultas")
                        .HasForeignKey("AtencionId")
                        .HasConstraintName("FK_SolicitudInterconsulta_AtencionMedica")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xmedicalehr.api.Models.Departamento", "Departamento")
                        .WithMany("SolicitudesInterconsultas")
                        .HasForeignKey("DepartamentoId")
                        .HasConstraintName("FK_SolicitudInterconsulta_Departamento");

                    b.HasOne("xmedicalehr.api.Account.User", "Medico")
                        .WithMany("InterconsultasSolicitadas")
                        .HasForeignKey("MedicoId")
                        .HasConstraintName("FK_SolicitudInterconsulta_MedicoSolicitante");

                    b.HasOne("xmedicalehr.api.Account.User", "MedicoInterconsultado")
                        .WithMany("SolicitudesInterconsultas")
                        .HasForeignKey("MedicoInterconsultadoId")
                        .HasConstraintName("FK_SolicitudInterconsulta_MedicoInterconsultado");

                    b.Navigation("Atencion");

                    b.Navigation("Departamento");

                    b.Navigation("Medico");

                    b.Navigation("MedicoInterconsultado");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.TipoAntecedente", b =>
                {
                    b.HasOne("xmedicalehr.api.Models.GrupoAntecedente", "Grupo")
                        .WithMany("TiposAntecedentes")
                        .HasForeignKey("GrupoId")
                        .HasConstraintName("FK_TipoAntecedente_GrupoAntecedente");

                    b.Navigation("Grupo");
                });

            modelBuilder.Entity("xmedicalehr.api.Account.User", b =>
                {
                    b.Navigation("Atenciones");

                    b.Navigation("AtencionesCreadas");

                    b.Navigation("InterconsultasSolicitadas");

                    b.Navigation("NotasEnfermeria");

                    b.Navigation("NotasMedicas");

                    b.Navigation("SolicitudesInterconsultas");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Aseguradora", b =>
                {
                    b.Navigation("Atenciones");

                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.AtencionMedica", b =>
                {
                    b.Navigation("Medicaciones");

                    b.Navigation("NotasEnfermeria");

                    b.Navigation("NotasMedicas");

                    b.Navigation("OrdenesMedicas");

                    b.Navigation("SignosVitales");

                    b.Navigation("SolicitudesInterconsultas");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Cama", b =>
                {
                    b.Navigation("Atenciones");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Departamento", b =>
                {
                    b.Navigation("SolicitudesInterconsultas");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Enfermedad", b =>
                {
                    b.Navigation("Diagnosticos");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Estudio", b =>
                {
                    b.Navigation("OrdenesMedicas");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.ExploracionItemTemplate", b =>
                {
                    b.Navigation("ExploracionItems");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.GrupoAntecedente", b =>
                {
                    b.Navigation("TiposAntecedentes");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Habitacion", b =>
                {
                    b.Navigation("Camas");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Medicamento", b =>
                {
                    b.Navigation("Medicaciones");

                    b.Navigation("OrdenesMedicas");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Nacionalidad", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.NotaEnfermeria", b =>
                {
                    b.Navigation("Medicaciones");

                    b.Navigation("SignosVitales");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.NotaMedica", b =>
                {
                    b.Navigation("CustomFields");

                    b.Navigation("Diagnosticos");

                    b.Navigation("ExploracionItems");

                    b.Navigation("OrdenesMedicas");

                    b.Navigation("SignosVitales");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Paciente", b =>
                {
                    b.Navigation("Alergias");

                    b.Navigation("Antecedentes");

                    b.Navigation("Atenciones");

                    b.Navigation("PacienteParentescos");

                    b.Navigation("ParentescosPaciente");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Provincia", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.Sustancia", b =>
                {
                    b.Navigation("Alergias");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.TipoAntecedente", b =>
                {
                    b.Navigation("AntecedentesPacientes");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.TipoAtencion", b =>
                {
                    b.Navigation("Atenciones");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.TipoNotaMedica", b =>
                {
                    b.Navigation("NotasMedicas");
                });

            modelBuilder.Entity("xmedicalehr.api.Models.TipoParentesco", b =>
                {
                    b.Navigation("PacientesParentesco");
                });
#pragma warning restore 612, 618
        }
    }
}
